#!/bin/bash

# Handle config overlays (*.trident)
conflist="/etc/csh.cshrc /etc/bluetooth/audio.conf"
for conf in ${conflist}
do
  if [ ! -e "${conf}.trident" ] ; then continue ; fi
  # copy the overlay over. Will replace local modifications
  cp "${conf}.trident" "${conf}"
done

# Ensure the firewall config file exists
if [ ! -e "/etc/nftables.conf" ] ; then
  ln -s "/etc/firewall-conf/open-out.conf" "/etc/nftables.conf"
fi

# If wireguard config dir exists, make sure the dir itself is readable
# (needed to see which profiles are available, even if the conf's themselves are unreadable)
if [ -d "/etc/wireguard" ] ; then
  chmod +055 /etc/wireguard
fi

# Ensure the pam_zfscript.so module is used
grep -q "pam_zfscrypt.so" "/etc/pam.d/passwd"
if [ $? -ne 0 ] ; then
  echo "Enabling zfscrypt support in PAM"
  echo "password  optional  pam_zfscrypt.so" >> /etc/pam.d/passwd
fi
grep -q "pam_zfscrypt.so" "/etc/pam.d/system-auth"
if [ $? -ne 0 ] ; then
  echo "auth  optional  pam_zfscrypt.so" >> /etc/pam.d/system-auth
  echo "session  optional  pam_zfscrypt.so  runtime_dir=/tmp/zfscrypt" >> /etc/pam.d/system-auth
fi

# Ensure the bluetooth config file replaces the default Void file (which has nothing enabled)
if [ -e "/etc/bluetooth/main.conf.trident" ] && [ -f "/etc/bluetooth/main.conf" ] ; then
  grep -qE '^(ReconnectAttempts=)' "/etc/bluetooth/main.conf"
  if [ $? -ne 0 ] ; then
    echo "Replacing bluetooth config with Trident defaults"
    mv /etc/bluetooth/main.conf /etc/bluetooth/main.conf.orig
    ln -s /etc/bluetooth/main.conf.trident /etc/bluetooth/main.conf
  fi
elif [ -e "/etc/bluetooth/main.conf.trident" ] && [ ! -e "/etc/bluetooth/main.conf" ] ; then
  echo "Enabling Trident bluetooth config"
  ln -s /etc/bluetooth/main.conf.trident /etc/bluetooth/main.conf
fi

# Enable required services
svlist_enable="nftables dcron dbus bluetoothd autofs"
# Disable services that are security vulnerabilities or break things
svlist_disable="bluez-alsa"

for svc in ${svlist_enable}
do
  if [ ! -e "/var/service/${svc}" ] && [ -e "/etc/sv/${svc}" ] ; then
    echo "Enabling service: ${svc}"
    ln -s "/etc/sv/${svc}" "/var/service/${svc}"
  fi
done
for svc in ${svlist_disable}
do
  if [ -e "/var/service/${svc}" ] ; then
    echo "Disabling service: ${svc}"
    sv stop ${svc}
    rm "/var/service/${svc}"
  fi
done

# Quick check that the root shell is /bin/bash and not /bin/sh (dash on Void)
rshell=$(getent passwd | grep -E "^(root:)" | cut -d : -f 7)
if [ "${rshell}" = "/bin/sh" ] ; then
  chsh -s "/bin/bash" root
fi
